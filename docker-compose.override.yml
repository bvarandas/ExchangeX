version: '3.4'

services:
  # matchingx:
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #   ports:
  #     - "80"
  #   networks:
  #     - exchange
  
  zookeeper:
    container_name: zookeeper
    restart: always
    ports:
      - "8080:8080"
      - "2181:2181"
  
  zoonavigator:
    container_name: zoonavigator 
    restart: unless-stopped
    ports:
      - "9000:9000"
  
  # postgres:
  #   container_name: postgres
  #   restart: always
  #   # set shared memory limit when using docker-compose
  #   shm_size: 128mb
  #   # or set shared memory limit when deploy via swarm stack
  #   #volumes:
  #   #  - type: tmpfs
  #   #    target: /dev/shm
  #   #    tmpfs:
  #   #      size: 134217728 # 128*2^20 bytes = 128Mb
  #   environment:
  #     POSTGRES_PASSWORD: example
  #   networks:
  #     - exchange

  # adminer:
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - exchange

  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - exchange

  redis:
    container_name: redis
    command: redis-server --requirepass Redis2019!
    ports:
      - "6379:6379"
    networks:
      - exchange
  
  mongodb:
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    container_name: mongo
    #restart: always
    ports:
      - "27017:27017"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - exchange
  
  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"

  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
  

  # orderentryx:
  #   container_name: orderentryx
  #   ports:
  #     - "5022:5022"
  #   networks:
  #     - exchange
  
  testenginex:
    container_name: testenginex
    ports:
      - "5023:5023"
    networks:
      - exchange

  orderenginex:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5024:5024"
    networks:
      - exchange

  security.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "5025:80"
    networks:
      - exchange

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:
    # driver: local

networks:
    exchange:
        driver: bridge

